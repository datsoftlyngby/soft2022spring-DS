%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 470.000000 331.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 377 265
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 377 265
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /x put
dup 34 /zero put
dup 35 /one put
dup 36 /h put
dup 37 /summation put
dup 38 /space put
dup 39 /A put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<



00>] def
/CharStrings 9 dict dup begin
/.notdef 0 def
/space 1 def
/zero 2 def
/one 3 def
/A 4 def
/h 5 def
/x 6 def
/summation 7 def
/uni2B91 8 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C99D7B912F94734180BCB0A2B426ACDB993C61FD2485EFF51D552B7983EECF235595D121D981B45BAB07467F6AAD6DCA1D60414BC27687DB884E62C1AB889A60F265C3A94BE447536A1416F24269E1CFC090F613D26FAB834F36D9A8302C88696B7DDAA92B424B1DB2EDC53AEC25754CFCA5BD66A3421F92F30AFD37E594578003EA8B926CC5C01930EF072B9F6D9657F7DDC633303FCA4CC3A22F46955BB37C3D2DC15A27EC14E731E005404CEA2E7FFC999BB4E0DC87F59D2BF072F15615C07CD82091E452C01C92CBD22D42F997245C509A480DAC59E92A705F1E1A697BCA1B8CA2DE3E272BB72AFF75182BF2787BA94EDE0F194235C9A2A6E8055729BFEBCE837A33ACB7BE73447988997057267ADDEB69951F706A2C45C9C80DE61BC3CC7C679D991D79A513353FF0221655C21FEC466927E54428C82B6D4BE28716EFD7DA88D194E0D1ADB676C5023401FF2862C1BE7CF5431FAED890FF3C8773AE46CE97C36824F749F7751680FCBDA9A18AC487A014E150FC79F6BECC1506DD75506129EAE7339FA361879C629AC16AB5977084077603F6AD4B477C7AC4F828C252250C39D3D77B8682B31B7E24AEFD7C9D91FEC5C3EFD8E3921D05801C8AF60BA53184179ACA7271E26F9A14118968FD9CE1ED8EF99A3D0791CFF1F2E9623E85CA4B540A0CC603D495F27AA15415B57AE7EB654FAFB2C56A7B3BA9F9D0A92E5D0BA452EDB41D95C5EFB57C55677533586DDC79C77DB7E2D87B20E8711123D66803CC2AF
A358A47AFB58F1E18C64E8BC0AB20E036AE639ADF0496D00E6261BC52C85FC71A02E9AC2CAEDDB656144A6F2D91388D9A50D4FC503C7DFB7EE98BD453B50E774832EAA8AF7ED3A53F102B188D8A7F883DDA39E9D83BEFA6185C49980D87A8758C8477F20EB0EF641F641321C9B84C669B35B1E4450282D331EC592DD57DBA8E5977846911CF630285C7E822F02D328E568338B122495E96C340A38CE301938C7C051967D56D9E4190E3E24A36268D27302BA78B86D87A1162D867E1C5F1F85E38A453AD966543D5B1FD9CF98631110CFC984F00E99EA053D80328C8E4F04928E72F28540472180CB37A050C49E690D73F0860BB8E869A5AFF52AAEA23AF5B7BFCA6B35E196FD59138C1A2557795EB4DD009DA1F825F9E9141830E723AEEA49C6B7080AF03323FEDAE5FDC377996D77E1EB435BE5E327C97D2EF34E8E1165FD72EF2AE1FB4684DF94F407C44C77F443EF78589D06AFB2A9B3AC60770CA774FCF63F2EF26462284EFE198B59FE5D025558F80FB711D6A1DE626E6E46F5C955A53D97AA2C50523F1030C5649A2C9EA01EF3B78A20A8956D3DE1D20891B576B57C7D0973918857DBF2F0CA9B7CD93020EA20FF0CE22B8474C87D84320ABBEDD7A2654C6F4843A4B91CF0CA346F0F307599212A0D37EA561E2D32DB8CC08D8A846B21BA1C8CC3CAC6499F54E3065E6E449CAE9536960C7A5EFC12BA93B576C638B8CEF4CD3A55D0F4E2C54F52B2A82EE9005C04CFF4A8DC0FB16F2068
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
%RBIBeginFontSubset: STIXGeneral-Regular
%!FontType1-1.0: STIXGeneral-Regular Version 1.1%%CreationDate: 10/4/17% Copyright 2017 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (Version 1.1) readonly def/FullName (STIXGeneral-Regular) readonly def/FamilyName (STIXGeneral) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /STIXGeneral-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /u1D6C9 putdup 34 /one putdup 35 /two putdup 36 /three putreadonly def/FontBBox {-970 -443 2000 1023} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF7EB58E220E85793C0433AF2A45EBF62DD8B9F5A108BA75CB7C98B6BEC011F0F42449B07B79DA3BEBEA3A6AC5FEED2A05DEDF3231B21222822C7C2372DEF08CCC1296357CA3396970F25A327CEE7F8F043B36972335D01652D551A410814285F8F03048150055CC06C8C5844C0A675CFA0131EF0EDC1E2D9EB15028CEC8C3A72401017BF84E048F989D19565F103DF83BC6FD5F19F0B04432C9E25AAC4112E6B4B4D375D3AF4EF4075DCC8365D82AC8D2B785845DC1269089BC8538CE3F3E285963516DAC70F34F9E6D1846C57FA0FBB292D68D149FFB7275F45A752461817BD2A9D1168178F9035B91DEFED567D1B286ADE0B53B65A65D80CFB016680490A95F231B8A3687A8C45C001179E7FD456DDA9EEEF91F249B52ACB0C96687F8338424E9DC5BE0C5724C41B83847804A032A7596A787CDEC2D346B44376E68794EB6B983CD8E7D7FEEC9D6B9E0F4DA9B50976FA5A9A2FD9B91310CAB03F18C9DA8518AE8C8E1280D54F35EAEC014F139E8C48E66D5660CE0CA79880CFDEB0610222759311091EF20C02C6203CA77B6431EFD75B511CADC806CBE9E10F0A974E1B4292138BAE44AEA92B54A12D10A43E3BDE09310A7A8867F0604E68527DDB30F9C2744A81856E52A0628F1A610B31BA031037B7CD18A87ECFB1C094FB73313D4687DA84EE54CDE44FA7343F244671F64C4BCB6BB93BDF914B6955C8D9B36FBB85AA9AD8B73CCBF7FEFECBB43A790C182B973CEB38145945C6DDAD75446DAB6A0B1609BF8825E7E654E544307637B20AF21D81C8E19A5356D6E38D2AB40E675C71BB3F93355B7CD5BB0C7D5F3CB43110750705C14777F1E73F97B752AA2030F6013C43F6453D182E23FF714269CDA3D12BD29903A6BAAF6A05B50098B9C6B751A40409552D205361A445C4216176A29AAE1DE691F0D6284225CEA276D5A261A02A45ED72A2475215F6A496EF029FAAB16BDA1672A6FA9EDA4219A4E98B304155E894390AE39B3DBC3620E24FB60A2135D6B939F7A4D28C2A2041A36212CF91D24828342560752E40D77BE6393807E0EDB414D1C148FCF0869CB6C7C1453F68E3E8CCF10E8BB6188DFD31EA1829C8813006BD379163D1D550CB512F86D8DA9CDD9DD67620236E9A16DB388BF91C3C1A0F5B93E595EB3D8777A02841E5E640D68109FB98172BCCFD0ABD22F029985EC2B0F4A96AF413AFE8696D95ABED1335D614F710EFB732953EDB5AA0CAA6B60DF402E0F74A270EFF91364A50C8C335100D3F63E16E6428E92F40A047B95FEDC4829359C112AD468B68EA5DBF1CECBB076657B91086FC2F412CAEADAE86FB8E150C3D15C93FAEB3CDE760196EBB49779F4DE57C449B2BF1AD1C7B6AC3C5D1BB94ACFC0CB73638EC30E3B65E34F4BAC74E7F3405CF381CDCCED81DA790A78AA6307D4CC389F783604DC1A53B3EB13B5A7132B3CB8AAB75B2F8E5AB6ECB1B8A3A6533004AC158B254D7FF71C7660273F529D30762366EC0D7E84F301E052C079C623D9D667078E22D8AA5E49E0E53177DEE45E9EF6A21094F600F8D8341F7EE88465A0F34D6EAE4A2C63F7A6BB09FE64E7944925548375EE1B7A7D694898294343AA68EF181C3B8AE5742E5508E3C424925C9481DB34079DC0BC932FF8B8F22B066D88F6D7F3071D7050B0632C31452A6BE280A9C0AF32533705BF002F295049435C608738E27BB9B5D09BB6DED03028A9F6FDFF459AC034EDF79C54F5990EB13634AD9AE281C166AAFAFD924995BA98D884F7506C2EE73E332E192653BAECECB592D8EC4DB0147B115A274DF1BE8D113A1A3F6FBE89948E66D5676C8B0FCAB76388195E81FDB09A848558C5D57EEB517D587C535AC7E0063334A0DA0261E030ECADBCC439AED3D68DF090E1A6885AB9829C469FD4B76BD8A9496DD4957014839A839DFA2B9469386360D41E1F7818A85F8084B16F58E5EAA795704FFA7BB0749556F2CF57B01716358CC0B8D2D00AA75B414CAF47A2B8AAB6157D94BAA0D4E6F48F41DF5ACDCB7F8988AEF00298F0A45EC322B1194A057B3883CC4907B92333FC8F7319618BD9EED0F7203CA0033620BEC7E627C5B35C61591D81F3BD1B1C72DD7A03B73C3FFC7CB525BE26433339CB2338C1674FE649DD9936265682343928D913C8CB4B9CDDD4FC0063708FBB75DB738A6408CE6F645A408A0F9236DB3372B57C33C4AF526E9A88A569E2F98BEF76490AE0886699D867F3E7F11B5F812CB5BCD8942572EB992E15274238DF16BEEFF10AA0D0D0E9F692932AF4719D1BB2144661B413C147E8A2FA00FB702070190660696E654AB452F955B3FAA85ECDDE97BBF70D36E760BD2884AC53642CDDCC0101EFFB8BBC326C08252FD0E27C1C373267C282A755008B9FE4C313EA1C747B1FAD299D186424264E849D4BD4D24B8A1D5256A599EE1FBD1C312732B933A0D4F4AF555486CC3CF16F8DE472D0799F08F749DE5F51EA0A4A521DE0E76659D6D4796FD99C770E7B6CD392B54E9939107C47E3B311570354C7333EAE224817E19339ED46E62A90DCE58A73DDC82605CF21B8094E5F44FBDC4739CF255DA870FB8204919CEBCEACB0BFAF7E904E07FEAD5D1967FC849A597B30BE896DE3BD743DE6DB6F3C9B9DB78C8EEAA440FBDC89FAF9B9717EDA7E62CFB1C1CEB2B3334B2E02E90596B5F1E756B36D63860BF2C499364B58C7724D041F1EEDF9FD753C5989D1F48319467CB444D8C7C5C4FED54116A6D5A57A65F0B1B18A1178404C4E754D5F4D29212E3C9E1AC57F5E5BB0D5E771C3FE697A5D506447F027DA78D462E91E28C5CF0437D698FBF7BC0CAE18A386FC46E5AAD56F8546174858AEE696C95613706915D2B325BE28FFCA9221AFC22AACD4C77518CCC007D61CB856F54B49F40581AA71D405210382003EFF442A3088DE3D5CB3952F438D0FBB4CD888C87B70D8FBE5B13B479D2639731B19A32164F15852FB1351CE7940F27A3103189D739F6F4E8896161A29428E324DAADB330BAE2EFD4BF8D02551DBCF1B4986AFA6AB5E1892CC148E4C2D65CB5B894BAA0D9AED8D7535E947C7F53F27CBFF648465FC40E90C76E3AEAB04AFC888C98317EED1D18A6C49A65D0DD00F34A36AA05F6227CA9245F7029FE560BC4F03CA5B7E4800F96C2619702F6903B5B96922E727EDD3189B48E09D0A24BC5C78C6DF2F8B7C2A8FE8C477246D2D18805DA4196C033B8AF592A8DB755A36C17D0FB9A88F8794874B0E635C49D92C1509081555A45E9D6F9995BAF03B468ED715A511CD198B0BA1CAF438B52B65B8626608069CA4B46ABFCA187E600141CEF4ECE10ACEE935B41B2B650D10668665C7E60219D58B677C9773F57C1521D2CF84B2019CFEF1056123A08DD796DD02601EDC9F580555BCAD658A04A1FB2299F4857E17495C0730BA3FC450D2004EE59FB0AC8F5A9B3213BAB22DBB6170CD6C1D6BD1AD6430D30995188653AFF3D88A1B9C5EADC6E0602163888E0E63BEFFBD3BFACA53DABB9BD0784BAF347AFEF71E51127FA0D230C5B3B7CDBFD33F21DB2A59FCC876FCA74B42A7C1E783A77D6E796FA0FAD5C690FF23779C5EC58B585F72F17620102B1113B57AE9244C7CEA236D2D8A395E2224198E4700304B285A69AF9BF305905FC29CED26F5A8C34275E9689B8C324734F0C8CDD7D5A373F02CC19958BD698DBFFC8D12E28374AEB9C15ECE6F679FD6CFB59B41BAD0E5BFA2A96A0831BC538F988708F57D0DC42B89EE37FE855B6CF041757C41ECDBF2797B9E85EE524789B1DC8821325F95DCAE8CFBEE0FC9BE4725BA4C59983DD73B4B0556B2BB18717B1AEA7594F74A21FF56D28FFD42C65DA135E4DF325E4C6CD7368D41796A766825B67A3DD11038C80D19C3BB39FDBFB5171E2666CD3C8C55F5807E0584E5664E448A4E5014A235A780A3D972AE4E8D69661B5C5859037FF53903E69FA2C9A9CB29C97DB5B37BF8A48CCC9E528A41A916064FB877FB8FE27F7C1E8BFC502D58897E986F1B989C9B598B4F1AF308C06E3E8FB62555CB64E9AD406E54BD5BD0C7C0EED78D73EF9981EA09F95825A344DDE84E0B8A441F89759767F7EC33AB74ECD09131215298BC2382224C41602D693E34B16E44A9B234FAC998B136DD14521D05FADBF7AB4D4CBD769CD59FEF45CB0DB844FFC2BA2F55E89CF134695A869049B1325D53D3135983FECD925DA558B68A6AD3057811BD8D7969CC62B596B6E4C24C6E3DE845D39F1E802B2C492B32EE8FA38210B74338807AB16F67F3E19F1500BD69A372283B09F78F4FAA99F9E5074FE0312159E6963E99565B8FB7DA9592D3D9B6BF9349B87AE8143C1826114907A6BA8996912D5381F8401C1993A31703C770B5A691A21E5715B95ED0D7A25F11D447A6C28C96A8A20CB56D2521DCD0645F173D0945D1124F7DE9D7472690E49EBD68980CF63EB76160D957B85E700E81BC9FA6A00878D0641C2D2B7A7FB43DA8F9FF7DE9207868655E932C32FDC401F5BE8E248C747433126A4AE2F7E81DB298930E430712ACD749B3D2336CBF8F1C3A2048CEE736E8A28234C36030E39A54AD4FE6F8DF5125AACCA9DF32A865C2E60924B70B1C9CC0F38935182989970426A8BE37D4376AEA72C117D0F99DCEE41392B73EC060F1F6104362A053DBCBDF75E671A9B39EA90E6C2F108CF1EDF09A65C9BAA6909833244722F562FC9E29F8AB655E0FCBBA5BC14631FAF98AFAE9B135F6CFDB99BD11745C3E1A4F36AF8DB59C3142B667385A5270956719A9024924B695112F58BBB8D570AEBFA9BA13D637BD5C957E8D344E8F7B93DBC8C9D19E87137813BC8CC0229EB97273C925B4537A04C8D67F4F184DD2C75A880EFFC219B1D304B04A3BEB70A3266621D0B92B1AA1678F2F14D31F1E392B026598B1FC987BA0CF0C1946F545B4277C24B289D453BFCF05E3DF5E1396D23CEDAD9103C2823AFF2B7820805541D1EAD2AE7C10CD70F47336F41D9025355B8DC6AF714AC42FA9F82D78E27C1BDCA34CD59F791AB9CB7BF38BA99B76442F7189F0C35464AC7A9A2870D14B4803CCDCF77C1046AFF2689F3BDD33785F52A2BBF8FCFA25490645863B238D950BBDAE4342967663C94DA27082068609FB2FF4C3F6A898CEF0182F405AEAC8F761C64100881D86A48735BEF9EF354D57FFFF084EA67DCF4A11596C79F3F5D343BF7CE49499EBDD6FC05D982645629F98AE9587245BE584F4A84C2194D67B3C5D04E491A7C2A0FE9A566E45CDF8CA36EA9351AF71BC1C55B905C4791EEE064BD2F8198DD8EE8B75B337C8B9540F45280228C1EA79B425DEBC6275612EE485FC05BF8F9D4D1F25A9650B9211D73CE19FBB77C8B11C07E904631B1DB8578F75E758AB185D8731E7F620608D1C61F2436C2502984BE9A6E7ADFD528AA7135E107C4E3F4176D5C9BA98B074F08772789FF397F044C09064C8353B9AC3880E4B91FADE34B497FCACA28F85833BCE6C42AAAF29F1D148BED941316CC515DACED2CE85F11513D62647B7DC22BDCB01711CD1CD4EF24B80D3645B83A57A46589D16A943B97774A3C8EEB94F35D8D77F90CC755BEC12147ADA640D8FFE60E345AAE73C8A3B60D27EC2D11A6190B3B820B76AA16548506288A20847707AD1A415016B46806F4C20E4C747F97A05D995ED966C8DA4C6A9F1ABA4AE1809BDF0949595E4B760F406275FE0881BB93E09DCC009C8F3F47B314468B3619CE23F761D32D9C9CC71D3970C11BE193E513EAF3852BC05D4AAE5215C832F88621DA689694F6694F54B722B3AF027BEF367754A0990CF5D0CFF60DD6E3D3A17B7C9B5DE1F1A7E659CCB1D7FE316FA4637A69C563F515BA48D6E620E8BBBA529AD68211A4CF52AB05A88B775A769F11C0B16B381A748D3CA52990FF01617FD162B0D6A1BF35D14764F848BFDF0EEB36567FAF8476C37B8AF2EC5D76A6EB12BD3A0721BD9D1FB290C02C69BC00115C87DA9CA04AA0EA998087B505B8D124B499DDBF82C2A11025D3DAD4150EDF542EEF84B047AC0FA4BE8D66CF7A57427A1E68C07B8F175771BAFF7C24FFE51C720949233300A45399BED8DE41C6B3678D0EC7C9A150ECEFD74223ACE628F974BA01EAC2BB7436C63D37AF9933582DBA1FDC6625243D3D38D0C58B7CABEDC411C6481C9FE08758B2F2A3FC1513CF1076C427B4DE8E7BEFD45636F9BEA7A036C9EAD1F24B6D4C55E592FE3EE12C3B86BABCA4FA042E9A057FD162B0BE5F5B4E341DD8E5AB3EC66BE643BD5F1A17BB70C4BAC3ED0B4DF9D76F9B6FBFA40624A3DF6B4D2654779791F885B9F729375A5A54D1672BB8C71C4526856A6D4AA278BD4F57F914C3DC831251C6D83F74276E8A4ECD0191B06003C92DEBAB78BD24326B59CE82274EDCA7B29C002D8A8FDC12B727C19DD6CFFED385CBFF78FBC1CC79FD69AE352ECA5D568D7F4AA908BDE29F1598514610C240266B8DF08D9001659260F212D15D005B2D50956FB4B1F2544F0A2ABEE2AC414C5C9BE4EC8014FC97A2839722B6FCB4396D759CF8803F6E793AC32A0D73B134D83295F437DB974A88BD10ED8674B0D0DB563DC82B0B4A6B0AC1D6BFF04F94255094593F97C0406473E29F1579B50AFB638C7748DA41FC9BEE47566013CCBB76ADA7D6F248D63B91C69D5EDF1CA4038E1A1E16567AA250CE64B49402BD23EB893889281EB71606ECD82D196674794710734C701C1E66768CCDF0CB297CE97F80ED55191CD3D51566A53B2CF0865605CB4C9A56BF57854BB01A669603DCF52CFA472CA85E69EE07E5C814242E6159BA28C13C9A298C0C48C349D6F2C5DE9EAC6EFDF2CAF4DD82B51805C2A9FA26ED6F24EC11FD1DAF9960A002A9BF184375B3055621C92561AC78E54C825EAE88028D667E9D883D2DB47154137678B9DC02A175C5B6DF780CDB501897652921E11D2BF03680A4896F237F48797168533CE431AFE9845A3692DAE9418137090AA1D0F0D61DA5B887E330FA525995C14E63E069F71FEA7B2C9E2314A022CBD0179A348A71EF5777A73E346600312C3D20BF50AFABE22F01AA50425C60EC8DD7B219A8796503D4ACD30B25E3081BCA4A0066B3CB29854F7EBA62303C8CB5D22DAB8B1A64270EA6C363F2C512D17C4597958FF360BC2CD1861EE89D2FE03080AD285AC4C6821DC830F935C0A3FC51F5FF19638D69379F7EBFFEE19E7927AD45FD037D962431DAC51F9A79DF8127029489FBAD46F7B5C59DA2DCB552EDB1FF04C593E4D56EF518F7C3F1CEC4CDD20909A70A1EE1B72311AEE7965DC4897B9AF935D9BAA90DF0382CD86040B3E705B7FB0B2D591C59AF2CDB8096207C60715C8BF4962AE95602869FC2E5DC8D236E448FD60040DB1DB5F0CB2C5166E9FAA4896B2814EC647CD1B034B50DD9C16F3C7EA7E4184E367D54D6AAFC75A2E665723408E8736F108BAE28CBBADD202AF635A631F889441FB756125347B2965C2595609581933A078F32D9C43693E87186619CFDC1C36BB42E418B1D4626E0D6485E15E8D6F488950C4DE682A76F8DD650811E220D2ED6CCADCF65D46FA81247C52DA15A3ED4128C54FDFD28ADEB174096BCA63873AAD06B33766D5B0C5D4CF1433FFF64EA654AFACEDDB21148D5DE760556AF8458016D15B9DC6A704480CDCA22E613E6C0379CCB5B88A0994C27E5EE3302C6975E0AD54D61FC61A0A913A135A261B6A1C1B8ED05E8CE30B10AE95153571E50E5D2B6A05C9A822A5AB0C08786A77B5677CA6D431DCBF93CC2560D1C4B54EBE1EAE062BC0CA8E4827BFD82886F41C8224D4C6CC4164120D8FF96C3FCFB2AC3C0D26BC70932ECBB5BB0766BFC06A5BEF8C1F2F49B5EBB7E96CF0547F02872696CFCAEA0EAB15A2FCA2297492E9C5A956FDB914D3309F3E5E6E8414614500668D6B7C14EF4322AF582A0C59BDF304A825C3D1783A46F60B292EF09AE4C47EFE12D672800AC15DFE7F940356B2949369F968009CFB08121BF150A7F742DD7DB3B5F8159E46D98234C679A1CA1D0E829462C8D0274D7BC2AC6BB0DA8B17C7BED0D9F20225C3C204A71601FEDEEAED3617267E937B694F26909D226B75167EB29B79533F21026C8E18D51ABDC6F8F1F76F8CD05126B56BEBB9BE3C9CAF96BF81A24B8639C695AAC3872FF51EB2F5D373112FDA05E617755C4420193B0A8092E176ACF4869D04A193B014E807FD5B788695E3E0F66D6FBE907224416D920D0A3229D06CD13F20EEE41394DBB4796957ADD47BF2E4420E5754964045B67A0D88D369EC31924240016E57738A3CFBAC5331E69AE8AF4E0D0F621F12793B1C462CD97A6D3C94BB49606CE7A4975433D1ACF59C6EF87530843D3A2474824F8813B9F6C15462246A444863CF72E0C772E819B8AD90D9A0DEFF7827020A53964BD39D2A5C8CD5DA94132A02E1AA3DF0B2F8F7B85FEC19311FDE804E9DAC0A9F08C75DC7407E0C150200FF933964EC1EBAF3C620CD4FC5F1E33CB8DF21B628092CD035900986B6AF16559AA814E2DA55B536828D31FB66DD8C99498684384A00CE3F4EDA408E23009A3F65BE3E2D21248BAA23E0DEEE0DC3346FCE33E2F7DEA2C801565682743B50504A53D3B81FA550F2B0765F531D5F40BE5D6C352FB6BCC5B09AA5FA5B0FF84D3C2260CC13F785816ADA3BCF85662DE42ADD05AF78CC9DB9A050BC4159B5A5ABA172BB1EB59C803188957E9D10A1BDF3893F2568C343DB5A64B41A119B160C617D7FE3FDF59D8526A3E10D9451F455D26E57CFDD361C495902086CAB5B64BCB5AAC84354711E0D860654E4E3AF9EC7C59293CD58BBF02A2C4E46592C6FD934DCBB09382C416EE88973F8F3AB142D7B481D6DAD92A66A021A7FD9F8DE022B3035A9E4A70421713E31119D0C30C1C1F0E23428975BCB977D8F13CC7F9B53F00642E14BF5565DE7C765FAA52F82C57472D26754C08612BE5C9653023B633F98B91CAA9AD16F4EBCA94C7CA5C8E170A2F61B82A39F194DF602FB9A87CE28D7A5CB1D8178786443B1A06CAA9A30757E77B0F2A87060A8D61B6878DC55BF998F895D7432DAAD5BD001F421DFAA8526AF6C2DA16BC53F58149B546F400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/STIXGeneral-Regular cguidfix
/F2.1/STIXGeneral-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 376 264.80002 rc
126.14212 231.74213 m
133.95264 223.93164 133.95264 211.26836 126.14212 203.45789 c
118.33164 195.64737 105.66836 195.64737 97.85788 203.45789 c
90.047363 211.26836 90.047363 223.93164 97.85788 231.74213 c
105.66836 239.55264 118.33164 239.55264 126.14212 231.74213 c
f
1 J
1 j
0.60000002 i
0 0 0 sc
0.80000001 0 0 -0.80000001 -89.599998 418.39999 cm
269.67764 233.32236 m
279.4408 243.08545 279.4408 258.91455 269.67764 268.67764 c
259.91455 278.4408 244.08545 278.4408 234.32236 268.67764 c
224.5592 258.91455 224.5592 243.08545 234.32236 233.32236 c
244.08545 223.5592 259.91455 223.5592 269.67764 233.32236 c
S
0 i
1 1 1 sc
CM
126.14212 166.14212 m
133.95264 158.33165 133.95264 145.66837 126.14212 137.85788 c
118.33164 130.04736 105.66836 130.04736 97.85788 137.85788 c
90.047363 145.66837 90.047363 158.33165 97.85788 166.14212 c
105.66836 173.95264 118.33164 173.95264 126.14212 166.14212 c
f
0.60000002 i
0 0 0 sc
0.80000001 0 0 -0.80000001 -89.599998 418.39999 cm
269.67764 315.32236 m
279.4408 325.08545 279.4408 340.91455 269.67764 350.67764 c
259.91455 360.4408 244.08545 360.4408 234.32236 350.67764 c
224.5592 340.91455 224.5592 325.08545 234.32236 315.32236 c
244.08545 305.5592 259.91455 305.5592 269.67764 315.32236 c
S
0 i
1 1 1 sc
CM
126.14212 100.54212 m
133.95264 92.731644 133.95264 80.068359 126.14212 72.257881 c
118.33164 64.447357 105.66836 64.447357 97.85788 72.257881 c
90.047363 80.068359 90.047363 92.731644 97.85788 100.54212 c
105.66836 108.35264 118.33164 108.35264 126.14212 100.54212 c
f
0.60000002 i
0 0 0 sc
0.80000001 0 0 -0.80000001 -89.599998 418.39999 cm
269.67764 397.32236 m
279.4408 407.08545 279.4408 422.91455 269.67764 432.67764 c
259.91455 442.4408 244.08545 442.4408 234.32236 432.67764 c
224.5592 422.91455 224.5592 407.08545 234.32236 397.32236 c
244.08545 387.5592 259.91455 387.5592 269.67764 397.32236 c
S
0 i
1 1 1 sc
CM
126.14212 34.94212 m
133.95264 27.131639 133.95264 14.46836 126.14212 6.6578803 c
118.33164 -1.15264 105.66836 -1.15264 97.85788 6.6578803 c
90.047363 14.46836 90.047363 27.131639 97.85788 34.94212 c
105.66836 42.75264 118.33164 42.75264 126.14212 34.94212 c
f
0.60000002 i
0 0 0 sc
0.80000001 0 0 -0.80000001 -89.599998 418.39999 cm
269.67764 479.32236 m
279.4408 489.08545 279.4408 504.91455 269.67764 514.67767 c
259.91455 524.4408 244.08545 524.4408 234.32236 514.67767 c
224.5592 504.91455 224.5592 489.08545 234.32236 479.32236 c
244.08545 469.5592 259.91455 469.5592 269.67764 479.32236 c
S
0 i
1 1 1 sc
CM
217.34212 231.74213 m
225.15265 223.93164 225.15265 211.26836 217.34212 203.45789 c
209.53165 195.64737 196.86836 195.64737 189.05788 203.45789 c
181.24736 211.26836 181.24736 223.93164 189.05788 231.74213 c
196.86836 239.55264 209.53165 239.55264 217.34212 231.74213 c
f
0.60000002 i
0 0 0 sc
0.80000001 0 0 -0.80000001 -89.599998 418.39999 cm
383.67764 233.32236 m
393.4408 243.08545 393.4408 258.91455 383.67764 268.67764 c
373.91455 278.4408 358.08545 278.4408 348.32236 268.67764 c
338.5592 258.91455 338.5592 243.08545 348.32236 233.32236 c
358.08545 223.5592 373.91455 223.5592 383.67764 233.32236 c
S
0 i
1 1 1 sc
CM
217.34212 166.14212 m
225.15265 158.33165 225.15265 145.66837 217.34212 137.85788 c
209.53165 130.04736 196.86836 130.04736 189.05788 137.85788 c
181.24736 145.66837 181.24736 158.33165 189.05788 166.14212 c
196.86836 173.95264 209.53165 173.95264 217.34212 166.14212 c
f
0.60000002 i
0 0 0 sc
0.80000001 0 0 -0.80000001 -89.599998 418.39999 cm
383.67764 315.32236 m
393.4408 325.08545 393.4408 340.91455 383.67764 350.67764 c
373.91455 360.4408 358.08545 360.4408 348.32236 350.67764 c
338.5592 340.91455 338.5592 325.08545 348.32236 315.32236 c
358.08545 305.5592 373.91455 305.5592 383.67764 315.32236 c
S
0 i
1 1 1 sc
CM
217.34212 100.54212 m
225.15265 92.731644 225.15265 80.068359 217.34212 72.257881 c
209.53165 64.447357 196.86836 64.447357 189.05788 72.257881 c
181.24736 80.068359 181.24736 92.731644 189.05788 100.54212 c
196.86836 108.35264 209.53165 108.35264 217.34212 100.54212 c
f
0.60000002 i
0 0 0 sc
0.80000001 0 0 -0.80000001 -89.599998 418.39999 cm
383.67764 397.32236 m
393.4408 407.08545 393.4408 422.91455 383.67764 432.67764 c
373.91455 442.4408 358.08545 442.4408 348.32236 432.67764 c
338.5592 422.91455 338.5592 407.08545 348.32236 397.32236 c
358.08545 387.5592 373.91455 387.5592 383.67764 397.32236 c
S
0 i
1 1 1 sc
CM
217.34212 34.94212 m
225.15265 27.131639 225.15265 14.46836 217.34212 6.6578803 c
209.53165 -1.15264 196.86836 -1.15264 189.05788 6.6578803 c
181.24736 14.46836 181.24736 27.131639 189.05788 34.94212 c
196.86836 42.75264 209.53165 42.75264 217.34212 34.94212 c
f
0.60000002 i
0 0 0 sc
0.80000001 0 0 -0.80000001 -89.599998 418.39999 cm
383.67764 479.32236 m
393.4408 489.08545 393.4408 504.91455 383.67764 514.67767 c
373.91455 524.4408 358.08545 524.4408 348.32236 514.67767 c
338.5592 504.91455 338.5592 489.08545 348.32236 479.32236 c
358.08545 469.5592 373.91455 469.5592 383.67764 479.32236 c
S
0 i
1 1 1 sc
CM
34.94212 166.14212 m
42.75264 158.33165 42.75264 145.66837 34.94212 137.85788 c
27.131639 130.04736 14.46836 130.04736 6.6578803 137.85788 c
-1.15264 145.66837 -1.15264 158.33165 6.6578803 166.14212 c
14.46836 173.95264 27.131639 173.95264 34.94212 166.14212 c
f
0.60000002 i
0 0 0 sc
0.80000001 0 0 -0.80000001 -89.599998 418.39999 cm
155.67764 315.32236 m
165.4408 325.08545 165.4408 340.91455 155.67764 350.67764 c
145.91455 360.4408 130.08545 360.4408 120.32235 350.67764 c
110.5592 340.91455 110.5592 325.08545 120.32235 315.32236 c
130.08545 305.5592 145.91455 305.5592 155.67764 315.32236 c
S
/Cs2 SC
0 sc
0 i
0.80000001 0 0 -0.80000001 20.800001 152 cm
/F1.1[ 16 0 0 -16 0 0]sf
-8.592 5.776001 m
(!")[ 8.288000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
34.94212 100.54212 m
42.75264 92.731644 42.75264 80.068359 34.94212 72.257881 c
27.131639 64.447357 14.46836 64.447357 6.6578803 72.257881 c
-1.15264 80.068359 -1.15264 92.731644 6.6578803 100.54212 c
14.46836 108.35264 27.131639 108.35264 34.94212 100.54212 c
f
0.60000002 i
0 0 0 sc
0.80000001 0 0 -0.80000001 -89.599998 418.39999 cm
155.67764 397.32236 m
165.4408 407.08545 165.4408 422.91455 155.67764 432.67764 c
145.91455 442.4408 130.08545 442.4408 120.32235 432.67764 c
110.5592 422.91455 110.5592 407.08545 120.32235 397.32236 c
130.08545 387.5592 145.91455 387.5592 155.67764 397.32236 c
S
/Cs2 SC
0 sc
0 i
0.80000001 0 0 -0.80000001 20.800001 86.400002 cm
-8.592 5.776001 m
(!#)[ 8.288000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
308.54211 132.54213 m
316.35263 124.73164 316.35263 112.06836 308.54211 104.25788 c
300.73166 96.447365 288.06836 96.447365 280.25787 104.25788 c
272.44736 112.06836 272.44736 124.73164 280.25787 132.54213 c
288.06836 140.35265 300.73166 140.35265 308.54211 132.54213 c
f
0.60000002 i
0 0 0 sc
0.80000001 0 0 -0.80000001 -89.599998 418.39999 cm
497.67764 357.32236 m
507.4408 367.08545 507.4408 382.91455 497.67764 392.67764 c
487.91455 402.4408 472.08545 402.4408 462.32236 392.67764 c
452.5592 382.91455 452.5592 367.08545 462.32236 357.32236 c
472.08545 347.5592 487.91455 347.5592 497.67764 357.32236 c
S
/Cs2 SC
0 sc
0 i
0.80000001 0 0 -0.80000001 294.39999 118.4 cm
-4.448 5.776001 m
($)s
2 w
0.60000002 i
/Cs1 SC
0 0 0 sc
0.80000001 0 0 -0.80000001 -89.599998 418.39999 cm
163.00002 333 m
226.99998 333 l
S
165.45312 333 m
233.85193 397.80536 l
S
158.29817 400.39957 m
231.70183 347.60043 l
S
158.29817 429.60043 m
231.70183 482.39957 l
S
163.00002 415 m
226.99998 415 l
S
158.29817 318.39957 m
231.70183 265.60043 l
S
152.2717 353.53122 m
237.7283 476.46878 l
S
152.2717 394.46878 m
237.7283 271.53122 l
S
277 251 m
341 251 l
S
278.57422 251 m
347.76541 315.89706 l
S
266.2717 271.53122 m
351.7283 394.46878 l
S
262.51437 273.68893 m
355.48563 474.31107 l
S
272.29816 318.39957 m
345.70184 265.60043 l
S
277 333 m
341 333 l
S
272.29816 347.60043 m
345.70184 400.39957 l
S
266.2717 353.53122 m
351.7283 476.46878 l
S
266.2717 394.46878 m
351.7283 271.53122 l
S
272.29816 400.39957 m
345.70184 347.60043 l
S
277 415 m
341 415 l
S
272.29816 429.60043 m
345.70184 482.39957 l
S
277 497 m
341 497 l
S
272.29816 482.39957 m
345.70184 429.60043 l
S
266.2717 476.46878 m
351.7283 353.53122 l
S
262.51437 474.31107 m
355.48563 273.68893 l
S
382.92023 269.40448 m
463.07977 356.59552 l
S
389.46423 341.64471 m
456.53577 366.35529 l
S
389.59543 406.72089 m
456.40457 383.27911 l
S
383.06879 478.7334 m
462.93121 393.2666 l
S
/Cs3 SC
0 0 0 sc
0 i
0.80000001 0 0 -0.80000001 73.599998 250.8 cm
/F2.1[ 16 0 0 -16 0 0]sf
-8.0080004 5 m
(!")[ 8.016000 0.000000 ] xS
0.80000001 0 0 -0.80000001 157.60001 250.8 cm
-8.0080004 5 m
(!#)[ 8.016000 0.000000 ] xS
0.80000001 0 0 -0.80000001 248 250.8 cm
-8.0080004 5 m
(!$)[ 8.016000 0.000000 ] xS
[
2
8
] 0 d
0.60000002 i
/Cs1 SC
0.66422421 0.66424006 0.66423154 sc
0.80000001 0 0 -0.80000001 -89.599998 418.39999 cm
390.78549 500.27777 m
555.04297 522 l
555.04364 521.98181 l
S
390.78467 493.71597 m
554.67578 472 l
S
0 i
1 1 1 sc
CM
369.34213 34.94212 m
377.15265 27.131639 377.15265 14.46836 369.34213 6.6578803 c
361.53165 -1.15264 348.86838 -1.15264 341.05789 6.6578803 c
333.24738 14.46836 333.24738 27.131639 341.05789 34.94212 c
348.86838 42.75264 361.53165 42.75264 369.34213 34.94212 c
f
1 w
[] 0 d
0.60000002 i
0 0 0 sc
0.80000001 0 0 -0.80000001 -89.599998 418.39999 cm
573.67767 479.32236 m
583.4408 489.08545 583.4408 504.91455 573.67767 514.67767 c
563.91455 524.4408 548.08545 524.4408 538.32233 514.67767 c
528.5592 504.91455 528.5592 489.08545 538.32233 479.32236 c
548.08545 469.5592 563.91455 469.5592 573.67767 479.32236 c
S
/Cs2 SC
0 sc
0 i
0.80000001 0 0 -0.80000001 355.20001 20.800001 cm
/F1.1[ 16 0 0 -16 0 0]sf
-14.24 5.776001 m
(%&&')[ 9.216000 4.448000 4.448000 0.000000 ] xS
2 w
0.60000002 i
/Cs1 SC
0 0 0 sc
0.80000001 0 0 -0.80000001 -89.599998 418.39999 cm
556.64288 472 m
556.34521 522 l
S
ep
end
%%Trailer
%%EOF
